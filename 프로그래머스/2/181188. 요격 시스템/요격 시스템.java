import java.util.*;

class Solution {
    public int solution(int[][] targets) {
        int defend = 0; // 요격 횟수
        Arrays.sort(targets, (o1,o2) -> {return o1[1]-o2[1];}); // 끝나는 지점 기준으로 정렬
        int missile = -1; // 현재 위치 (x축 값) => 요격 여부를 결정할 위치
        for(int[] target : targets){ // 끝점이 빠른 순서대로 가져와서 미사일 탐색
            if(missile == -1){ // 맨 처음 반복문 들어왔을 때 (이전 미사일이 없을 때)
                defend++; //  요격 횟수를 1로 조정
                missile = target[1]; // 정렬된 배열의 맨 처음 미사일을 요격 => 다음 위치는 현재 미사일 범위 바깥에서 시작 
                // 만약 현재 미사일 범위 내부에 또 다른 미사일이 있다면 그 위치에 요격하면 됨 (둘을 함께 요격하는 위치가 현재 미사일 범위 내에 있다 -> 거기를 요격, 위치는 알 필요 없고, 최소의 요격 횟수는 여전히 1이 된다 -> count는 하나만 하면 된다)
            }
            if(target[0] < missile && target[1] >= missile) continue; // 현재 가장 빨리 끝나는 미사일의 범위에 현재 위치가 속한다면, 다음 미사일로 이동해서 그 미사일도 현재 위치에서 요격 가능한지 확인(반복) => 현재 요격 위치에서 요격할 수 없는 미사일이 나올 때까지는 모두 현재 요격 위치에서 요격할 것이므로 요격횟수는 늘리지 않는다.
            
            defend++; // 요격 가능한 위치를 벗어난 미사일을 만남 -> 요격 횟수가 늘어난다
            missile = target[1]; // 확인할 미사일 업데이트해주고 다음 미사일도 현재 위치에서 요격 가능한지 확인하러 감 (현재 위치 끝점 이후를 x축 위치로 지정한다)
        }
        
        return defend;
    }
}